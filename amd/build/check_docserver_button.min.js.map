{"version":3,"file":"check_docserver_button.min.js","sources":["../src/check_docserver_button.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     mod_onlyofficeeditor/check_docserver_button\n * @copyright  2025 Ascensio System SIA <integration@onlyoffice.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n **/\n/* eslint-disable no-console */\ndefine(\n    ['core/notification', 'core/str', 'mod_onlyofficeeditor/repository', 'mod_onlyofficeeditor/url_validator'],\n    function(Notification, Str, Repository, UrlValidator) {\n    const fields = {\n        'docserverurl': 'documentserverurl',\n        'secret': 'documentserversecret',\n        'jwtheader': 'jwtheader',\n        'internalurl': 'documentserverinternal',\n        'storageurl': 'storageurl',\n        'disableverifyssl': 'disable_verify_ssl'\n    };\n\n    const validationElements = [];\n\n    const checkDocumentServerConnection = async(event) => {\n        event.preventDefault();\n\n        const docsurl = document.getElementById('id_s_onlyofficeeditor_documentserverurl').value.trim();\n        const connectionerrormessage = await Str.get_string(\"connectionerror\", \"onlyofficeeditor\");\n\n        const errors = await validateDocumentServerUrl(docsurl);\n\n        if (errors.length > 0) {\n            clearValidationOutput();\n            Notification.addNotification({\n                message: connectionerrormessage,\n                type: 'error'\n            });\n            for (const error of errors) {\n                highlightErrorField(error);\n            }\n            return;\n        }\n\n        await Repository.checkDocumentServerConnection(\n            docsurl,\n            document.getElementById('id_s_onlyofficeeditor_documentserversecret').value,\n            document.getElementById('id_s_onlyofficeeditor_jwtheader').value,\n            document.getElementById('id_s_onlyofficeeditor_documentserverinternal').value,\n            document.getElementById('id_s_onlyofficeeditor_storageurl').value,\n            document.getElementById('id_s_onlyofficeeditor_disable_verify_ssl').checked\n        )\n        .then(async (response) => {\n            clearValidationOutput();\n            if (response.status === 'success') {\n                Notification.addNotification({message: \"Connection is stable.\", type: 'success'});\n            } else if (response.status === 'error') {\n                Notification.addNotification({\n                    message: connectionerrormessage,\n                    type: 'error'\n                });\n                for (const error of response.errors) {\n                    if (error.field === \"general\") {\n                        Notification.addNotification({message: error.message, type: 'error'});\n                    } else {\n                        highlightErrorField(error);\n                    }\n                }\n            }\n            return;\n        }).catch(async (error) => {\n            console.error('Error checking Document Server connection:', error);\n            Notification.addNotification({\n                message: await Str.get_string(\"connectionerror:unexpected\", \"onlyofficeeditor\"),\n                type: 'error'\n            });\n        });\n    };\n\n    const highlightErrorField = (error) => {\n        const fieldForm = document.getElementById(\"admin-\" + fields[error.field]);\n        const fieldSetting = fieldForm ? fieldForm.querySelector(\".form-setting\") : null;\n        if (fieldSetting) {\n            const errorElement = document.createElement(\"div\");\n            errorElement.innerHTML = '<span class=\"error\">' + error.message + \"</span>\";\n            fieldSetting.prepend(errorElement);\n            validationElements.push(errorElement);\n        }\n    };\n\n    const clearValidationOutput = () => {\n        for (const element of validationElements) {\n            element.remove();\n        }\n        validationElements.length = 0;\n        const notifications = document.getElementById(\"user-notifications\");\n        notifications.innerHTML = \"\";\n    };\n\n    const validateDocumentServerUrl = async (url) => {\n        let error = [];\n\n        if (!url) {\n            error.push({\n                field: 'docserverurl',\n                message: await Str.get_string(\"validationerror:emptyurl\", \"onlyofficeeditor\")\n            });\n        } else if (!UrlValidator.isValidUrl(url)) {\n            error.push({\n                field: 'docserverurl',\n                message: await Str.get_string(\"validationerror:invalidurl\", \"onlyofficeeditor\")\n            });\n        } else if (UrlValidator.isMixedContent(url)) {\n            error.push({\n                field: 'docserverurl',\n                message: await Str.get_string(\"validationerror:mixedcontent\", \"onlyofficeeditor\")\n            });\n        }\n\n        return error;\n    };\n\n    return {\n        init: function() {\n            const checkButton = document.querySelector(\"button[data-action='check-documentserver-connection']\");\n            if (checkButton) {\n                checkButton.addEventListener('click', checkDocumentServerConnection);\n            }\n        }\n    };\n});\n/* eslint-enable no-console */\n"],"names":["define","Notification","Str","Repository","UrlValidator","fields","validationElements","checkDocumentServerConnection","async","event","preventDefault","docsurl","document","getElementById","value","trim","connectionerrormessage","get_string","errors","validateDocumentServerUrl","length","clearValidationOutput","addNotification","message","type","error","highlightErrorField","checked","then","response","status","field","catch","console","fieldForm","fieldSetting","querySelector","errorElement","createElement","innerHTML","prepend","push","element","remove","url","isValidUrl","isMixedContent","init","checkButton","addEventListener"],"mappings":";;;;;AAqBAA,qDACI,CAAC,oBAAqB,WAAY,kCAAmC,uCACrE,SAASC,aAAcC,IAAKC,WAAYC,oBAClCC,OAAS,cACK,2BACN,iCACG,wBACE,oCACD,8BACM,sBAGlBC,mBAAqB,GAErBC,8BAAgCC,MAAAA,QAClCC,MAAMC,uBAEAC,QAAUC,SAASC,eAAe,2CAA2CC,MAAMC,OACnFC,6BAA+Bd,IAAIe,WAAW,kBAAmB,oBAEjEC,aAAeC,0BAA0BR,YAE3CO,OAAOE,OAAS,GAChBC,wBACApB,aAAaqB,gBAAgB,CACzBC,QAASP,uBACTQ,KAAM,cAEL,MAAMC,SAASP,OAChBQ,oBAAoBD,kBAKtBtB,WAAWI,8BACbI,QACAC,SAASC,eAAe,8CAA8CC,MACtEF,SAASC,eAAe,mCAAmCC,MAC3DF,SAASC,eAAe,gDAAgDC,MACxEF,SAASC,eAAe,oCAAoCC,MAC5DF,SAASC,eAAe,4CAA4Cc,SAEvEC,MAAKpB,MAAAA,cACFa,wBACwB,YAApBQ,SAASC,OACT7B,aAAaqB,gBAAgB,CAACC,QAAS,wBAAyBC,KAAM,iBACnE,GAAwB,UAApBK,SAASC,OAAoB,CACpC7B,aAAaqB,gBAAgB,CACzBC,QAASP,uBACTQ,KAAM,cAEL,MAAMC,SAASI,SAASX,OACL,YAAhBO,MAAMM,MACN9B,aAAaqB,gBAAgB,CAACC,QAASE,MAAMF,QAASC,KAAM,UAE5DE,oBAAoBD,WAKjCO,OAAMxB,MAAAA,QACLyB,QAAQR,MAAM,6CAA8CA,OAC5DxB,aAAaqB,gBAAgB,CACzBC,cAAerB,IAAIe,WAAW,6BAA8B,oBAC5DO,KAAM,cAKZE,oBAAuBD,cACnBS,UAAYtB,SAASC,eAAe,SAAWR,OAAOoB,MAAMM,QAC5DI,aAAeD,UAAYA,UAAUE,cAAc,iBAAmB,QACxED,aAAc,OACRE,aAAezB,SAAS0B,cAAc,OAC5CD,aAAaE,UAAY,uBAAyBd,MAAMF,QAAU,UAClEY,aAAaK,QAAQH,cACrB/B,mBAAmBmC,KAAKJ,gBAI1BhB,sBAAwB,SACrB,MAAMqB,WAAWpC,mBAClBoC,QAAQC,SAEZrC,mBAAmBc,OAAS,EACNR,SAASC,eAAe,sBAChC0B,UAAY,IAGxBpB,0BAA4BX,MAAAA,UAC1BiB,MAAQ,UAEPmB,IAKOxC,aAAayC,WAAWD,KAKzBxC,aAAa0C,eAAeF,MACnCnB,MAAMgB,KAAK,CACPV,MAAO,eACPR,cAAerB,IAAIe,WAAW,+BAAgC,sBAPlEQ,MAAMgB,KAAK,CACPV,MAAO,eACPR,cAAerB,IAAIe,WAAW,6BAA8B,sBAPhEQ,MAAMgB,KAAK,CACPV,MAAO,eACPR,cAAerB,IAAIe,WAAW,2BAA4B,sBAc3DQ,aAGJ,CACHsB,KAAM,iBACIC,YAAcpC,SAASwB,cAAc,yDACvCY,aACAA,YAAYC,iBAAiB,QAAS1C"}
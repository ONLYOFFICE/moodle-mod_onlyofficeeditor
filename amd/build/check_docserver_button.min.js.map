{"version":3,"file":"check_docserver_button.min.js","sources":["../src/check_docserver_button.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     mod_onlyofficeeditor/check_docserver_button\n * @copyright  2025 Ascensio System SIA <integration@onlyoffice.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n **/\n/* eslint-disable no-console */\ndefine(['core/notification', 'mod_onlyofficeeditor/repository'], function(Notification, Repository) {\n    const fields = {\n        'docserverurl': 'documentserverurl',\n        'secret': 'documentserversecret',\n        'jwtheader': 'jwtheader',\n        'internalurl': 'documentserverinternal',\n        'storageurl': 'storageurl',\n        'disableverifyssl': 'disable_verify_ssl'\n    };\n\n    const validationElements = [];\n\n    const checkDocumentServerConnection = async (event) => {\n        event.preventDefault();\n        await Repository.checkDocumentServerConnection(\n            document.getElementById('id_s_onlyofficeeditor_documentserverurl').value,\n            document.getElementById('id_s_onlyofficeeditor_documentserversecret').value,\n            document.getElementById('id_s_onlyofficeeditor_jwtheader').value,\n            document.getElementById('id_s_onlyofficeeditor_documentserverinternal').value,\n            document.getElementById('id_s_onlyofficeeditor_storageurl').value,\n            document.getElementById('id_s_onlyofficeeditor_disable_verify_ssl').checked\n        )\n        .then(response => {\n            console.log(response);\n            clearValidationOutput();\n            if (response.status === 'success') {\n                Notification.addNotification({message: \"Connection is stable.\", type: 'success'});\n            } else if (response.status === 'error') {\n                Notification.addNotification({message: \"Connection error.\", type: 'error'});\n                for (const error of response.errors) {\n                    if (error.field === \"general\") {\n                        Notification.addNotification({message: error.message, type: 'error'});\n                    } else {\n                        highlightErrorField(error);\n                    }\n                }\n            }\n        }).catch(error => {\n            console.error('Error checking Document Server connection:', error);\n            Notification.addNotification({message: \"Unexpected error ocurred while checking connection.\", type: 'error'});\n        });\n    };\n\n    const highlightErrorField = (error) => {\n        const fieldForm = document.getElementById(\"admin-\" + fields[error.field]);\n        const fieldSetting = fieldForm ? fieldForm.querySelector(\".form-setting\") : null;\n        if (fieldSetting) {\n            const errorElement = document.createElement(\"div\");\n            errorElement.innerHTML = '<span class=\"error\">' + error.message + \"</span>\";\n            fieldSetting.prepend(errorElement);\n            validationElements.push(errorElement);\n        }\n    };\n\n    const clearValidationOutput = () => {\n        for (const element of validationElements) {\n            element.remove();\n        }\n        validationElements.length = 0;\n        const notifications = document.getElementById(\"user-notifications\");\n        notifications.innerHTML = \"\";\n    };\n\n    return {\n        init: function() {\n            const checkButton = document.querySelector(\"button[data-action='check-documentserver-connection']\");\n            if (checkButton) {\n                checkButton.addEventListener('click', checkDocumentServerConnection);\n            }\n        }\n    };\n});\n/* eslint-enable no-console */\n"],"names":["define","Notification","Repository","fields","validationElements","checkDocumentServerConnection","async","event","preventDefault","document","getElementById","value","checked","then","response","console","log","clearValidationOutput","status","addNotification","message","type","error","errors","field","highlightErrorField","catch","fieldForm","fieldSetting","querySelector","errorElement","createElement","innerHTML","prepend","push","element","remove","length","init","checkButton","addEventListener"],"mappings":";;;;;AAqBAA,qDAAO,CAAC,oBAAqB,oCAAoC,SAASC,aAAcC,kBAC9EC,OAAS,cACK,2BACN,iCACG,wBACE,oCACD,8BACM,sBAGlBC,mBAAqB,GAErBC,8BAAgCC,MAAAA,QAClCC,MAAMC,uBACAN,WAAWG,8BACbI,SAASC,eAAe,2CAA2CC,MACnEF,SAASC,eAAe,8CAA8CC,MACtEF,SAASC,eAAe,mCAAmCC,MAC3DF,SAASC,eAAe,gDAAgDC,MACxEF,SAASC,eAAe,oCAAoCC,MAC5DF,SAASC,eAAe,4CAA4CE,SAEvEC,MAAKC,cACFC,QAAQC,IAAIF,UACZG,wBACwB,YAApBH,SAASI,OACTjB,aAAakB,gBAAgB,CAACC,QAAS,wBAAyBC,KAAM,iBACnE,GAAwB,UAApBP,SAASI,OAAoB,CACpCjB,aAAakB,gBAAgB,CAACC,QAAS,oBAAqBC,KAAM,cAC7D,MAAMC,SAASR,SAASS,OACL,YAAhBD,MAAME,MACNvB,aAAakB,gBAAgB,CAACC,QAASE,MAAMF,QAASC,KAAM,UAE5DI,oBAAoBH,WAIjCI,OAAMJ,QACLP,QAAQO,MAAM,6CAA8CA,OAC5DrB,aAAakB,gBAAgB,CAACC,QAAS,sDAAuDC,KAAM,cAItGI,oBAAuBH,cACnBK,UAAYlB,SAASC,eAAe,SAAWP,OAAOmB,MAAME,QAC5DI,aAAeD,UAAYA,UAAUE,cAAc,iBAAmB,QACxED,aAAc,OACRE,aAAerB,SAASsB,cAAc,OAC5CD,aAAaE,UAAY,uBAAyBV,MAAMF,QAAU,UAClEQ,aAAaK,QAAQH,cACrB1B,mBAAmB8B,KAAKJ,gBAI1Bb,sBAAwB,SACrB,MAAMkB,WAAW/B,mBAClB+B,QAAQC,SAEZhC,mBAAmBiC,OAAS,EACN5B,SAASC,eAAe,sBAChCsB,UAAY,UAGvB,CACHM,KAAM,iBACIC,YAAc9B,SAASoB,cAAc,yDACvCU,aACAA,YAAYC,iBAAiB,QAASnC"}
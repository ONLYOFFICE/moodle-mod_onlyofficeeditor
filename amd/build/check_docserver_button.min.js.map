{"version":3,"file":"check_docserver_button.min.js","sources":["../src/check_docserver_button.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     mod_onlyofficeeditor/check_docserver_button\n * @copyright  2025 Ascensio System SIA <integration@onlyoffice.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n **/\n/* eslint-disable no-console */\ndefine(\n    [\n        'core/notification',\n        'core/str',\n        'mod_onlyofficeeditor/repository',\n        'mod_onlyofficeeditor/url_validator',\n        'mod_onlyofficeeditor/docs_integration_api',\n    ],\n    function(Notification, Str, Repository, UrlValidator, DocsIntegrationAPI) {\n        let checkButton = null;\n        const fields = {};\n        const validationElements = [];\n\n        const checkDocumentServerConnection = async(event) => {\n            event.preventDefault();\n            checkButton.disabled = true;\n            checkButton.classList.add('loading');\n\n            const data = {\n                docsurl: fields.docsurl.value.trim(),\n                secret: fields.secret.value.trim(),\n                jwtheader: fields.jwtheader.value.trim(),\n                internalurl: fields.internalurl.value.trim(),\n                storageurl: fields.storageurl.value.trim(),\n                disableverifyssl: fields.disableverifyssl.checked,\n            };\n\n            const errors = await validateFields(data);\n            clearValidationOutput();\n\n            if (errors.length > 0) {\n                await displayErrors(errors);\n            } else {\n                Notification.addNotification({\n                    message: await Str.get_string(\"connectionsuccess\", \"onlyofficeeditor\"),\n                    type: 'success',\n                });\n            }\n\n            checkButton.disabled = false;\n            checkButton.classList.remove('loading');\n        };\n\n        const highlightErrorField = (error) => {\n            const fieldForm = document.getElementById(\"admin-\" + error.field);\n            const fieldSetting = fieldForm ? fieldForm.querySelector(\".form-setting\") : null;\n            if (fieldSetting) {\n                fieldSetting.querySelectorAll(\".error\").forEach((el) => {\n                    el.remove();\n                });\n                const errorElement = document.createElement(\"div\");\n                errorElement.innerHTML = '<span class=\"error\">' + error.message + \"</span>\";\n                fieldSetting.prepend(errorElement);\n                validationElements.push(errorElement);\n            }\n        };\n\n        const clearValidationOutput = () => {\n            for (const element of validationElements) {\n                element.remove();\n            }\n            validationElements.length = 0;\n            const notifications = document.getElementById(\"user-notifications\");\n            notifications.innerHTML = \"\";\n        };\n\n        const displayErrors = async(errors) => {\n            for (const error of errors) {\n                if (error.field === 'general') {\n                    Notification.addNotification({\n                    message: error.message,\n                    type: 'error',\n                });\n                } else {\n                    highlightErrorField(error);\n                }\n            }\n\n            Notification.addNotification({\n                message: await Str.get_string(\"connectionerror\", \"onlyofficeeditor\"),\n                type: 'error',\n            });\n        };\n\n        const validateFields = async(data) => {\n            const errors = await preValidateFields(data);\n\n            if (errors.length > 0) {\n                return errors;\n            }\n\n            await Repository.checkDocumentServerConnection(\n                data.secret,\n                data.jwtheader,\n                data.internalurl.length > 0 ? data.internalurl : data.docsurl,\n                data.storageurl,\n                data.disableverifyssl,\n            )\n            .then(async(response) => {\n                if (response.status === 'error') {\n                    for (const error of response.errors) {\n                        errors.push({\n                            field: error.field,\n                            message: error.message\n                        });\n                    }\n                }\n                return;\n            }).catch(async(error) => {\n                console.error('Error checking Document Server connection:', error);\n                errors.push({\n                    field: 'general',\n                    message: await Str.get_string(\"connectionerror:unexpected\", \"onlyofficeeditor\"),\n                });\n            });\n\n            return errors;\n        };\n\n        const preValidateFields = async(data) => {\n            const errors = [];\n\n            try {\n                await validateDocumentServerUrl(data.docsurl);\n            } catch (e) {\n                errors.push({\n                    field: 'documentserverurl',\n                    message: e.message\n                });\n            }\n\n            if (data.internalurl && !UrlValidator.isValidUrl(data.internalurl)) {\n                errors.push({\n                    field: 'documentserverinternal',\n                    message: await Str.get_string(\"validationerror:invalidurl\", \"onlyofficeeditor\")\n                });\n            }\n\n            if (data.storageurl && !UrlValidator.isValidUrl(data.storageurl)) {\n                errors.push({\n                    field: 'storageurl',\n                    message: await Str.get_string(\"validationerror:invalidurl\", \"onlyofficeeditor\")\n                });\n            }\n\n            return errors;\n        };\n\n        const validateDocumentServerUrl = async(url) => {\n            if (!url) {\n                throw new Error(await Str.get_string(\"validationerror:emptyurl\", \"onlyofficeeditor\"));\n            }\n\n            if (!UrlValidator.isValidUrl(url)) {\n                throw new Error(await Str.get_string(\"validationerror:invalidurl\", \"onlyofficeeditor\"));\n            }\n\n            if (UrlValidator.isMixedContent(url)) {\n                throw new Error(await Str.get_string(\"validationerror:mixedcontent\", \"onlyofficeeditor\"));\n            }\n\n            await DocsIntegrationAPI.loadDocsApi(url)\n                .catch((e) => {\n                    console.log(e);\n                });\n\n            // eslint-disable-next-line no-undef\n            if (typeof DocsAPI === \"undefined\" || DocsAPI === null) {\n                throw new Error(await Str.get_string('validationerror:apijsunavailable', 'onlyofficeeditor'));\n            } else {\n                DocsIntegrationAPI.removeDocsApi();\n            }\n        };\n\n        return {\n            init: function() {\n                fields.docsurl = document.getElementById('id_s_onlyofficeeditor_documentserverurl');\n                fields.secret = document.getElementById('id_s_onlyofficeeditor_documentserversecret');\n                fields.jwtheader = document.getElementById('id_s_onlyofficeeditor_jwtheader');\n                fields.internalurl = document.getElementById('id_s_onlyofficeeditor_documentserverinternal');\n                fields.storageurl = document.getElementById('id_s_onlyofficeeditor_storageurl');\n                fields.disableverifyssl = document.getElementById('id_s_onlyofficeeditor_disable_verify_ssl');\n\n                if (\n                    !fields.docsurl || !fields.secret || !fields.jwtheader\n                    || !fields.internalurl || !fields.storageurl || !fields.disableverifyssl) {\n                    console.error('One or more required fields are missing in the form.');\n                    return;\n                }\n\n                checkButton = document.querySelector(\"button[data-action='check-documentserver-connection']\");\n                if (checkButton) {\n                    checkButton.addEventListener('click', checkDocumentServerConnection);\n                }\n            }\n        };\n    }\n);\n/* eslint-enable no-console */\n"],"names":["define","Notification","Str","Repository","UrlValidator","DocsIntegrationAPI","checkButton","fields","validationElements","checkDocumentServerConnection","async","event","preventDefault","disabled","classList","add","data","docsurl","value","trim","secret","jwtheader","internalurl","storageurl","disableverifyssl","checked","errors","validateFields","clearValidationOutput","length","displayErrors","addNotification","message","get_string","type","remove","highlightErrorField","error","fieldForm","document","getElementById","field","fieldSetting","querySelector","querySelectorAll","forEach","el","errorElement","createElement","innerHTML","prepend","push","element","preValidateFields","then","response","status","catch","console","validateDocumentServerUrl","e","isValidUrl","url","Error","isMixedContent","loadDocsApi","log","DocsAPI","removeDocsApi","init","addEventListener"],"mappings":"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"}